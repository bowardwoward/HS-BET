// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Create a status enum for the transfer token
enum Status {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id            String          @id @default(uuid())
  accountNumber String
  accountId     String?
  cId           String?
  mobile        String
  username      String          @unique
  password      String
  email         String          @unique
  tokens        Token?
  user_details  UserDetail?
  user_address  UserAddress?
  TransferToken TransferToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id           String   @id @default(uuid())
  token        String?
  refreshToken String?
  resetToken   String?
  expires_at   DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDetail {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  branch      String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAddress {
  id       String  @id @default(uuid())
  street   String?
  barangay String?
  city     String?
  province String?
  region   String?
  zipCode  String?
  country  String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransferToken {
  id                       String   @id @default(uuid())
  otp                      String   @unique
  hashedOtp                String
  // keep the destination account number as reference
  sourceAccountNumber      String
  destinationAccountNumber String
  amount                   String
  description              String   @default("Transfer")
  status                   Status   @default(PENDING)
  // Add the user model as reference when listing app level transactions
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}
